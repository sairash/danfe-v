import{_ as o,c as e,j as a,a as n,G as p,a3 as t,B as c,o as r}from"./chunks/framework.ohJJpums.js";const f=JSON.parse('{"title":"Danfe Types","description":"","frontmatter":{},"headers":[],"relativePath":"language/danfe-types.md","filePath":"language/danfe-types.md"}'),F={name:"language/danfe-types.md"},i={id:"danfe-types",tabindex:"-1"};function d(y,s,u,b,g,h){const l=c("Badge");return r(),e("div",null,[a("h1",i,[s[0]||(s[0]=n("Danfe Types ")),p(l,{type:"warning",text:"(Data Types)"}),s[1]||(s[1]=n()),s[2]||(s[2]=a("a",{class:"header-anchor",href:"#danfe-types","aria-label":'Permalink to "Danfe Types <Badge type="warning" text="(Data Types)" />"'},"​",-1))]),s[3]||(s[3]=t(`<p>Danfe is a <code>dynamically typed</code> language, so the variables don&#39;t have types, only the <code>values have types</code>. Values can be stored in <code>variables</code>, passed as <code>parameters</code> and returned as <code>results</code>.</p><p>The <strong>list</strong> of data types for values are given below:</p><table tabindex="0"><thead><tr><th>Type</th><th>Info</th></tr></thead><tbody><tr><td><a href="/language/danfe-types.html#string">string</a></td><td>Represents array of <code>characters</code>.</td></tr><tr><td><a href="/language/danfe-types.html#numbers">int</a></td><td>Represents <code>real numbers</code>.</td></tr><tr><td><a href="/language/danfe-types.html#numbers">float</a></td><td>Represents double precision <code>floating point</code> numbers.</td></tr><tr><td><a href="/language/danfe-types.html#int">nil</a></td><td>Represented with <code>0</code> in memory</td></tr><tr><td><a href="/language/danfe-types.html#int">boolean</a></td><td><code>true</code> or <code>false</code> value</td></tr><tr><td><a href="/language/danfe-types.html#array">array</a></td><td>Linear data structure where all elements are <code>arranged sequentially</code>.</td></tr><tr><td><a href="/language/danfe-types.html#table">table</a></td><td>A data structure that stores any <code>danfe types</code> in key value pairs</td></tr></tbody></table><h2 id="string" tabindex="-1">String <a class="header-anchor" href="#string" aria-label="Permalink to &quot;String&quot;">​</a></h2><p>Strings in Danfe are <code>UTF-8</code> encoded binaries. <br> <br> Strings in Elixir are a sequence of <code>Unicode characters</code>, typically written between double quoted strings, such as <code>&quot;hello&quot;</code> and <code>&quot;héllò&quot;</code>. <br> <br> In case a string must have a <code>quote in itself</code>, the quotes must be escaped with a <code>backslash</code>, for example: &quot;this is a string with \\&quot;double quotes\\&quot;&quot; <code>or</code> &#39;this is a string with \\&#39;double quotes\\&#39;. <br> <br> You can concatenate two strings with the <code>+</code> operator:</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-7RCMf" id="tab-rnQ_enO" checked><label data-title="English" for="tab-rnQ_enO">English</label><input type="radio" name="group-7RCMf" id="tab-Vb8Uzea"><label data-title="Nepali" for="tab-Vb8Uzea">Nepali</label></div><div class="blocks"><div class="language-danfe vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#FF9492;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;hello&quot;</span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;">&quot; &quot;</span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;">&quot;world&quot;</span><span style="color:#F0F3F6;">)   </span><span style="color:#BDC4CC;"># prints &quot;hello world&quot;</span></span>
<span class="line"></span></code></pre></div><div class="language-danfe vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#DBB7FF;">dekhauln</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;hello&quot;</span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;">&quot; &quot;</span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;">&quot;world&quot;</span><span style="color:#F0F3F6;">)   </span><span style="color:#BDC4CC;"># prints &quot;hello world&quot;</span></span>
<span class="line"></span></code></pre></div></div></div><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-usBZu" id="tab-SMFPB8r" checked><label data-title="English" for="tab-SMFPB8r">English</label><input type="radio" name="group-usBZu" id="tab-ttgAITE"><label data-title="Nepali" for="tab-ttgAITE">Nepali</label></div><div class="blocks"><div class="language-danfe vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#FFB757;">name</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;Bob&quot;</span><span style="color:#BDC4CC;">            # also written as &#39;Bob&#39;</span></span>
<span class="line"><span style="color:#FF9492;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">len</span><span style="color:#F0F3F6;">(name))      </span><span style="color:#BDC4CC;"># prints 3</span></span>
<span class="line"><span style="color:#FF9492;">println</span><span style="color:#F0F3F6;">(name[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">])         </span><span style="color:#BDC4CC;"># prints &#39;B&#39;</span></span>
<span class="line"><span style="color:#FF9492;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">typeof</span><span style="color:#F0F3F6;">(name))    </span><span style="color:#BDC4CC;"># prints &#39;string&#39;</span></span>
<span class="line"></span></code></pre></div><div class="language-danfe vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#FFB757;">name</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;Bob&quot;</span><span style="color:#BDC4CC;">            # also written as &#39;Bob&#39;</span></span>
<span class="line"><span style="color:#DBB7FF;">dekhauln</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">len</span><span style="color:#F0F3F6;">(name))      </span><span style="color:#BDC4CC;"># prints 3</span></span>
<span class="line"><span style="color:#DBB7FF;">dekhauln</span><span style="color:#F0F3F6;">(name[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">])         </span><span style="color:#BDC4CC;"># prints &#39;B&#39;</span></span>
<span class="line"><span style="color:#DBB7FF;">dekhauln</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">prakar</span><span style="color:#F0F3F6;">(name))    </span><span style="color:#BDC4CC;"># prints &#39;string&#39;</span></span>
<span class="line"></span></code></pre></div></div></div><h3 id="string-interplation" tabindex="-1">String Interplation <br> <a class="header-anchor" href="#string-interplation" aria-label="Permalink to &quot;String Interplation &lt;br&gt;&quot;">​</a></h3><p><code>String Interplation</code> can be achieved in <code>Danfe</code> by using <code>%i{</code> before a variable name and <code>}</code> after. The variable will be converted to a string and embedded into the literal:</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-voByA" id="tab-qenHCr6" checked><label data-title="English" for="tab-qenHCr6">English</label><input type="radio" name="group-voByA" id="tab-YSkNBNW"><label data-title="Neplai" for="tab-YSkNBNW">Neplai</label></div><div class="blocks"><div class="language-danfe vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#FFB757;">name</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;Danfe&quot;</span></span>
<span class="line"><span style="color:#FF9492;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Hello from </span><span style="color:#FF9492;">%i{</span><span style="color:#ADDCFF;">name</span><span style="color:#FF9492;">}</span><span style="color:#ADDCFF;">!&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span></code></pre></div><div class="language-danfe vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#FFB757;">name</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;Danfe&quot;</span></span>
<span class="line"><span style="color:#DBB7FF;">dekhauln</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Hello from </span><span style="color:#FF9492;">%i{</span><span style="color:#ADDCFF;">name</span><span style="color:#FF9492;">}</span><span style="color:#ADDCFF;">!&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span></code></pre></div></div></div><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#91CBFF;font-weight:bold;"># Output</span></span>
<span class="line"><span style="color:#F0F3F6;">Hello from Danfe!</span></span>
<span class="line"></span></code></pre></div><h3 id="escape-characters" tabindex="-1">Escape Characters <a class="header-anchor" href="#escape-characters" aria-label="Permalink to &quot;Escape Characters&quot;">​</a></h3><p>Besides allowing quotes to be escaped with a backslash, strings also support the following escape characters:</p><ul><li><code>\\0</code> -&gt; Null byte</li><li><code>\\a</code> -&gt; Bell</li><li><code>\\b</code> -&gt; Backspace</li><li><code>\\t</code> -&gt; Horizontal tab</li><li><code>\\n</code> -&gt; Line feed (New lines)</li><li><code>\\v</code> -&gt; Vertical tab</li><li><code>\\f</code> -&gt; Form feed</li><li><code>\\r</code> -&gt; Carriage return</li><li><code>\\e</code> -&gt; Command Escape</li><li><code>\\\\</code> -&gt; Single backslash</li></ul><h3 id="repeat-string" tabindex="-1">Repeat String <a class="header-anchor" href="#repeat-string" aria-label="Permalink to &quot;Repeat String&quot;">​</a></h3><p>You can repeate the string for <code>x</code> amount of times usnig the <code>*</code> operator:</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group--f2eb" id="tab-KmO9P5q" checked><label data-title="English" for="tab-KmO9P5q">English</label><input type="radio" name="group--f2eb" id="tab-uN585J0"><label data-title="Nepali" for="tab-uN585J0">Nepali</label></div><div class="blocks"><div class="language-danfe vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#FF9492;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;a&quot;</span><span style="color:#FF9492;"> *</span><span style="color:#91CBFF;"> 5</span><span style="color:#F0F3F6;">)   </span><span style="color:#BDC4CC;"># prints &#39;aaaaa&#39;</span></span>
<span class="line"></span></code></pre></div><div class="language-danfe vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#DBB7FF;">dekhauln</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;a&quot;</span><span style="color:#FF9492;"> *</span><span style="color:#91CBFF;"> 5</span><span style="color:#F0F3F6;">)   </span><span style="color:#BDC4CC;"># prints &#39;aaaaa&#39;</span></span>
<span class="line"></span></code></pre></div></div></div><h2 id="numbers" tabindex="-1">Numbers <a class="header-anchor" href="#numbers" aria-label="Permalink to &quot;Numbers&quot;">​</a></h2><p><strong>Int :</strong> <br> Whole numbers (not fractions)</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-IFSPM" id="tab-NNJ25i_" checked><label data-title="English" for="tab-NNJ25i_">English</label><input type="radio" name="group-IFSPM" id="tab-haIradW"><label data-title="Nepali" for="tab-haIradW">Nepali</label></div><div class="blocks"><div class="language-danfe vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#FFB757;">a</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 10</span></span>
<span class="line"><span style="color:#FF9492;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">typeof</span><span style="color:#F0F3F6;">(a)) </span><span style="color:#BDC4CC;"># prints &#39;int&#39;</span></span>
<span class="line"></span></code></pre></div><div class="language-danfe vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#FFB757;">a</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 10</span></span>
<span class="line"><span style="color:#DBB7FF;">dekhauln</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">prakar</span><span style="color:#F0F3F6;">(a)) </span><span style="color:#BDC4CC;"># prints &#39;int&#39;</span></span>
<span class="line"></span></code></pre></div></div></div><p>Danfe also supports writing numbers with <code>_</code> as separator:</p><div class="language-danfe vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#FFB757;">num</span><span style="color:#FF9492;"> =</span><span style="color:#FFB1AF;font-style:italic;"> 1_000_000</span><span style="color:#BDC4CC;">           # same as 1000000</span></span>
<span class="line"><span style="color:#FFB757;">float_num</span><span style="color:#FF9492;"> =</span><span style="color:#FFB1AF;font-style:italic;"> 69_122</span><span style="color:#F0F3F6;">.</span><span style="color:#FFB1AF;font-style:italic;">55_66</span><span style="color:#BDC4CC;">  # same as 69122.5566</span></span>
<span class="line"></span></code></pre></div><p><strong>Float :</strong> <br> Assigning floating point numbers works the same way:</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-GwGJc" id="tab-WsUlriH" checked><label data-title="English" for="tab-WsUlriH">English</label><input type="radio" name="group-GwGJc" id="tab-5c-_8mk"><label data-title="Nepali" for="tab-5c-_8mk">Nepali</label></div><div class="blocks"><div class="language-danfe vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#FFB757;">a</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 10.0</span></span>
<span class="line"><span style="color:#FF9492;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">typeof</span><span style="color:#F0F3F6;">(a)) </span><span style="color:#BDC4CC;"># prints &#39;float&#39;</span></span>
<span class="line"></span></code></pre></div><div class="language-danfe vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#FFB757;">a</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 10.0</span></span>
<span class="line"><span style="color:#DBB7FF;">dekhauln</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">prakar</span><span style="color:#F0F3F6;">(a)) </span><span style="color:#BDC4CC;"># prints &#39;float&#39;</span></span>
<span class="line"></span></code></pre></div></div></div><h2 id="nil" tabindex="-1">Nil <a class="header-anchor" href="#nil" aria-label="Permalink to &quot;Nil&quot;">​</a></h2><p><code>nil</code> aka <code>khali</code> is just an alias for <code>int 0</code></p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-_tKh9" id="tab-PoILkXQ" checked><label data-title="English" for="tab-PoILkXQ">English</label><input type="radio" name="group-_tKh9" id="tab-9casHj5"><label data-title="Nepali" for="tab-9casHj5">Nepali</label></div><div class="blocks"><div class="language-danfe vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#FFB757;">a</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> nil            </span><span style="color:#BDC4CC;"># equivalent to a = 0</span></span>
<span class="line"><span style="color:#FF9492;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">typeof</span><span style="color:#F0F3F6;">(a)) </span><span style="color:#BDC4CC;"># prints &#39;int&#39;</span></span>
<span class="line"></span></code></pre></div><div class="language-danfe vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#FFB757;">a</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> khali           </span><span style="color:#BDC4CC;"># equivalent to a = 0</span></span>
<span class="line"><span style="color:#DBB7FF;">dekhauln</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">prakar</span><span style="color:#F0F3F6;">(a)) </span><span style="color:#BDC4CC;"># prints &#39;int&#39;</span></span>
<span class="line"></span></code></pre></div></div></div><h2 id="boolean" tabindex="-1">Boolean <a class="header-anchor" href="#boolean" aria-label="Permalink to &quot;Boolean&quot;">​</a></h2><p>Includes <code>true</code> -&gt; <code>1</code> and <code>false</code> -&gt; <code>0</code> as values. Generally used for condition checking.</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-sgRxR" id="tab-NpoTmBs" checked><label data-title="English" for="tab-NpoTmBs">English</label><input type="radio" name="group-sgRxR" id="tab-gg7Sxwa"><label data-title="Nepali" for="tab-gg7Sxwa">Nepali</label></div><div class="blocks"><div class="language-danfe vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#FFB757;">a</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> true</span><span style="color:#BDC4CC;">                           # equivalent to a = 1</span></span>
<span class="line"><span style="color:#FFB757;">b</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> false</span><span style="color:#BDC4CC;">                          # equivalent to a = 0</span></span>
<span class="line"><span style="color:#FF9492;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">typeof</span><span style="color:#F0F3F6;">(a), </span><span style="color:#ADDCFF;">&quot; &quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">typeof</span><span style="color:#F0F3F6;">(b)) </span><span style="color:#BDC4CC;"># prints &#39;int int&#39;</span></span>
<span class="line"></span></code></pre></div><div class="language-danfe vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#FFB757;">a</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> thik</span><span style="color:#BDC4CC;">                            # equivalent to a = 1</span></span>
<span class="line"><span style="color:#FFB757;">b</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> bethik</span><span style="color:#BDC4CC;">                          # equivalent to a = 0</span></span>
<span class="line"><span style="color:#DBB7FF;">dekhauln</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">prakar</span><span style="color:#F0F3F6;">(a), </span><span style="color:#ADDCFF;">&quot; &quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#DBB7FF;">prakar</span><span style="color:#F0F3F6;">(b)) </span><span style="color:#BDC4CC;"># prints &#39;int int&#39;</span></span>
<span class="line"></span></code></pre></div></div></div><h2 id="array" tabindex="-1">Array <a class="header-anchor" href="#array" aria-label="Permalink to &quot;Array&quot;">​</a></h2><p>An array is a <code>collection</code> of data elements of the <code>any</code> <a href="./danfe-types.html#danfe-types">danfe types</a>. An array literal is a list of expressions <code>surrounded</code> by <code>square brackets</code>. An individual element can be accessed using an index expression. Indexes start from <code>0</code>:</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-FG-_1" id="tab-doDOut8" checked><label data-title="English" for="tab-doDOut8">English</label><input type="radio" name="group-FG-_1" id="tab-_7zBCxC"><label data-title="Nepali" for="tab-_7zBCxC">Nepali</label></div><div class="blocks"><div class="language-danfe vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#BDC4CC;"># Collection of users with their name and age</span></span>
<span class="line"><span style="color:#FFB757;">users</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> [[</span><span style="color:#ADDCFF;">&quot;Bob&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">21</span><span style="color:#F0F3F6;">], [</span><span style="color:#ADDCFF;">&quot;Jack&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">22</span><span style="color:#F0F3F6;">], </span><span style="color:#ADDCFF;">&quot;Charles&quot;</span><span style="color:#F0F3F6;">]  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># Can be updated using index</span></span>
<span class="line"><span style="color:#F0F3F6;">users[</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#ADDCFF;">&quot;Charles&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">35</span><span style="color:#F0F3F6;">]                      </span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">println</span><span style="color:#F0F3F6;">(users)</span></span>
<span class="line"><span style="color:#FF9492;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Name: &quot;</span><span style="color:#F0F3F6;">, users[</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">][</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">], </span><span style="color:#ADDCFF;">&quot; , Age: &quot;</span><span style="color:#F0F3F6;">, users[</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">][</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">])</span></span>
<span class="line"><span style="color:#FF9492;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Length of array: &quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">len</span><span style="color:#F0F3F6;">(users))</span></span>
<span class="line"></span></code></pre></div><div class="language-danfe vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#BDC4CC;"># Collection of users with their name and age</span></span>
<span class="line"><span style="color:#FFB757;">users</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> [[</span><span style="color:#ADDCFF;">&quot;Bob&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">21</span><span style="color:#F0F3F6;">], [</span><span style="color:#ADDCFF;">&quot;Jack&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">22</span><span style="color:#F0F3F6;">], </span><span style="color:#ADDCFF;">&quot;Charles&quot;</span><span style="color:#F0F3F6;">]  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># Can be updated using index</span></span>
<span class="line"><span style="color:#F0F3F6;">users[</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#ADDCFF;">&quot;Charles&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">35</span><span style="color:#F0F3F6;">] </span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">dekhauln</span><span style="color:#F0F3F6;">(users)</span></span>
<span class="line"><span style="color:#DBB7FF;">dekhauln</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Name: &quot;</span><span style="color:#F0F3F6;">, users[</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">][</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">], </span><span style="color:#ADDCFF;">&quot; , Age: &quot;</span><span style="color:#F0F3F6;">, users[</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">][</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">])</span></span>
<span class="line"><span style="color:#DBB7FF;">dekhauln</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Length of array: &quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#DBB7FF;">ginti</span><span style="color:#F0F3F6;">(users))</span></span>
<span class="line"></span></code></pre></div></div></div><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#91CBFF;font-weight:bold;"># Output</span></span>
<span class="line"><span style="color:#F0F3F6;">[[Bob, 21], [Jack, 22], [Charles, 35]]</span></span>
<span class="line"><span style="color:#F0F3F6;">Name: Jack , Age: 21</span></span>
<span class="line"><span style="color:#F0F3F6;">Length of array:  3</span></span>
<span class="line"></span></code></pre></div><details class="details custom-block" open=""><summary>Be carefull!</summary><p>If you try and update <code>array</code> using a <code>string index</code> it is going to convert <code>array</code> into a <code>table</code> and there is no going back! <br></p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-0AuQP" id="tab-WlGdGBE" checked><label data-title="English" for="tab-WlGdGBE">English</label><input type="radio" name="group-0AuQP" id="tab-zU5W-eb"><label data-title="Nepali" for="tab-zU5W-eb">Nepali</label></div><div class="blocks"><div class="language-danfe vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#FFB757;">user</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#FF9492;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">typeof</span><span style="color:#F0F3F6;">(user))     </span><span style="color:#BDC4CC;"># prints &#39;array&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">user[</span><span style="color:#ADDCFF;">&quot;abc&quot;</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#FF9492;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">typeof</span><span style="color:#F0F3F6;">(user))     </span><span style="color:#BDC4CC;"># prints &#39;table&#39;</span></span>
<span class="line"></span></code></pre></div><div class="language-danfe vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#FFB757;">user</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#DBB7FF;">dekhauln</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">prakar</span><span style="color:#F0F3F6;">(user))     </span><span style="color:#BDC4CC;"># prints &#39;array&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">user[</span><span style="color:#ADDCFF;">&quot;abc&quot;</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#DBB7FF;">dekhauln</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">prakar</span><span style="color:#F0F3F6;">(user))     </span><span style="color:#BDC4CC;"># prints &#39;table&#39;</span></span>
<span class="line"></span></code></pre></div></div></div></details><p>While creating an array if you use <code> multi line</code> intstead of the seperator <code>,</code>.</p><div class="language-danfe vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#FFB757;">x</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> [</span></span>
<span class="line"><span style="color:#ADDCFF;">    &quot;a&quot;</span></span>
<span class="line"><span style="color:#ADDCFF;">    &quot;b&quot;</span></span>
<span class="line"><span style="color:#ADDCFF;">    &quot;c&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">]                   </span><span style="color:#BDC4CC;"># same as x = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span>
<span class="line"></span></code></pre></div><h4 id="push-and-pop" tabindex="-1">Push and Pop <a class="header-anchor" href="#push-and-pop" aria-label="Permalink to &quot;Push and Pop&quot;">​</a></h4><p>To append (<code>push</code>) new value and to delete (<code>pop</code>) the last value of an array you can use these opeators ( <code>&lt;&lt;</code> and <code>&gt;&gt;</code> ) respectively. <br><br></p><p>While <code>poping</code> the <code>last</code> value which was <code>deleted</code> from the array is <code>returned</code></p><div class="language-danfe vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#BDC4CC;"># Pushing a value to array</span></span>
<span class="line"><span style="color:#FFB757;">arr</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> [</span><span style="color:#ADDCFF;">&quot;Hello&quot;</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#F0F3F6;">arr </span><span style="color:#FF9492;">&lt;&lt;</span><span style="color:#ADDCFF;"> &quot;from&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">arr </span><span style="color:#FF9492;">&lt;&lt;</span><span style="color:#F0F3F6;"> [</span><span style="color:#ADDCFF;">&quot;Danfe&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;and&quot;</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#F0F3F6;">arr[</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">&lt;&lt;</span><span style="color:#ADDCFF;"> &quot;Sairash&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">%i{</span><span style="color:#ADDCFF;">arr</span><span style="color:#FF9492;">}</span><span style="color:#ADDCFF;">, &quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">typeof</span><span style="color:#F0F3F6;">(arr))</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># Poping the last value from array</span></span>
<span class="line"><span style="color:#FF9492;">println</span><span style="color:#F0F3F6;">(arr </span><span style="color:#FF9492;">&gt;&gt;</span><span style="color:#F0F3F6;">) </span></span>
<span class="line"><span style="color:#FF9492;">println</span><span style="color:#F0F3F6;">(arr)</span></span></code></pre></div><div class="language-danfe vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#BDC4CC;"># Output</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">[Hello, </span><span style="color:#FF9492;">from</span><span style="color:#F0F3F6;">, [Danfe, </span><span style="color:#FF9492;">and</span><span style="color:#F0F3F6;">, Sairash]], array</span></span>
<span class="line"><span style="color:#F0F3F6;">[Danfe, </span><span style="color:#FF9492;">and</span><span style="color:#F0F3F6;">, Sairash]</span></span>
<span class="line"><span style="color:#F0F3F6;">[Hello, </span><span style="color:#FF9492;">from</span><span style="color:#F0F3F6;">]</span></span></code></pre></div><h2 id="table" tabindex="-1">Table <a class="header-anchor" href="#table" aria-label="Permalink to &quot;Table&quot;">​</a></h2><p>Tables are the &quot;go to&quot; <code>key-value</code> data structure in Danfe. Danfe itself uses a form of Table to store it&#39;s <code>identifiers</code> <br> <br> Like Arrays Tables too can store any of <code>Danfe Types</code> including tables itself. Arrays can only use number indexes and Tables can only use string indexes. <br><br> Tables can be created with the <code>[]</code> syntax, and key-value pairs can be expressed as <code>key =&gt; value</code>: <br> <br></p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-pnqiW" id="tab-dUOanxA" checked><label data-title="English" for="tab-dUOanxA">English</label><input type="radio" name="group-pnqiW" id="tab-SsSRlNv"><label data-title="Nepali" for="tab-SsSRlNv">Nepali</label></div><div class="blocks"><div class="language-danfe vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#BDC4CC;"># Table of users with their name as index</span></span>
<span class="line"><span style="color:#FFB757;">users</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> [</span><span style="color:#ADDCFF;">&quot;bob&quot;</span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;">[</span><span style="color:#ADDCFF;">&quot;age&quot;</span><span style="color:#FF9492;">=&gt;</span><span style="color:#91CBFF;">21</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;likes&quot;</span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;">[</span><span style="color:#ADDCFF;">&quot;fruits&quot;</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#ADDCFF;"> &quot;apple&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;color&quot;</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#ADDCFF;"> &quot;red&quot;</span><span style="color:#F0F3F6;">]], </span></span>
<span class="line"><span style="color:#ADDCFF;">        &quot;jack&quot;</span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;">[</span><span style="color:#ADDCFF;">&quot;age&quot;</span><span style="color:#FF9492;">=&gt;</span><span style="color:#91CBFF;">22</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;likes&quot;</span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;">[</span><span style="color:#ADDCFF;">&quot;fruits&quot;</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#ADDCFF;"> &quot;mango&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;color&quot;</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#ADDCFF;"> &quot;yellow&quot;</span><span style="color:#F0F3F6;">]]]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">println</span><span style="color:#F0F3F6;">(users)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># Can be updated using index</span></span>
<span class="line"><span style="color:#F0F3F6;">users[</span><span style="color:#ADDCFF;">&quot;bob&quot;</span><span style="color:#F0F3F6;">][</span><span style="color:#ADDCFF;">&quot;likes&quot;</span><span style="color:#F0F3F6;">][</span><span style="color:#ADDCFF;">&quot;color&quot;</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;black&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># Print just an index</span></span>
<span class="line"><span style="color:#FF9492;">println</span><span style="color:#F0F3F6;">(users[</span><span style="color:#ADDCFF;">&quot;bob&quot;</span><span style="color:#F0F3F6;">][</span><span style="color:#ADDCFF;">&quot;likes&quot;</span><span style="color:#F0F3F6;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Length of Table: &quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">len</span><span style="color:#F0F3F6;">(users))</span></span>
<span class="line"></span></code></pre></div><div class="language-danfe vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#BDC4CC;"># Table of users with their name as index</span></span>
<span class="line"><span style="color:#FFB757;">users</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> [</span><span style="color:#ADDCFF;">&quot;bob&quot;</span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;">[</span><span style="color:#ADDCFF;">&quot;age&quot;</span><span style="color:#FF9492;">=&gt;</span><span style="color:#91CBFF;">21</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;likes&quot;</span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;">[</span><span style="color:#ADDCFF;">&quot;fruits&quot;</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#ADDCFF;"> &quot;apple&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;color&quot;</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#ADDCFF;"> &quot;red&quot;</span><span style="color:#F0F3F6;">]], </span></span>
<span class="line"><span style="color:#ADDCFF;">        &quot;jack&quot;</span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;">[</span><span style="color:#ADDCFF;">&quot;age&quot;</span><span style="color:#FF9492;">=&gt;</span><span style="color:#91CBFF;">22</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;likes&quot;</span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;">[</span><span style="color:#ADDCFF;">&quot;fruits&quot;</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#ADDCFF;"> &quot;mango&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;color&quot;</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#ADDCFF;"> &quot;yellow&quot;</span><span style="color:#F0F3F6;">]]]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">dekhauln</span><span style="color:#F0F3F6;">(users)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># Can be updated using index</span></span>
<span class="line"><span style="color:#F0F3F6;">users[</span><span style="color:#ADDCFF;">&quot;bob&quot;</span><span style="color:#F0F3F6;">][</span><span style="color:#ADDCFF;">&quot;likes&quot;</span><span style="color:#F0F3F6;">][</span><span style="color:#ADDCFF;">&quot;color&quot;</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;black&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># Print just an index</span></span>
<span class="line"><span style="color:#DBB7FF;">dekhauln</span><span style="color:#F0F3F6;">(users[</span><span style="color:#ADDCFF;">&quot;bob&quot;</span><span style="color:#F0F3F6;">][</span><span style="color:#ADDCFF;">&quot;likes&quot;</span><span style="color:#F0F3F6;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">dekhauln</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Length of Table: &quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#DBB7FF;">ginti</span><span style="color:#F0F3F6;">(users))</span></span>
<span class="line"></span></code></pre></div></div></div><br><div class="info custom-block"><p class="custom-block-title">INFO</p><p><code>Arrays</code> in Danfe are just tables with certain restrictions, under the hood.</p></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Tables are the <code>only</code> data structure that helps us create different types like <code>arrays</code> and <code>dictionaries</code></p></div><p>While creating an tables if you use <code>multi line</code> intstead of the seperator <code>,</code>.</p><div class="language-danfe vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#FFB757;">users</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> [</span></span>
<span class="line"><span style="color:#ADDCFF;">    &quot;bob&quot;</span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;">[</span></span>
<span class="line"><span style="color:#ADDCFF;">        &quot;age&quot;</span><span style="color:#FF9492;">=&gt;</span><span style="color:#91CBFF;">21</span></span>
<span class="line"><span style="color:#ADDCFF;">        &quot;likes&quot;</span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;">[</span></span>
<span class="line"><span style="color:#ADDCFF;">            &quot;fruits&quot;</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#ADDCFF;"> &quot;apple&quot;</span></span>
<span class="line"><span style="color:#ADDCFF;">            &quot;color&quot;</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#ADDCFF;"> &quot;red&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">        ]</span></span>
<span class="line"><span style="color:#F0F3F6;">    ]</span></span>
<span class="line"><span style="color:#ADDCFF;">    &quot;jack&quot;</span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;">[</span></span>
<span class="line"><span style="color:#ADDCFF;">        &quot;age&quot;</span><span style="color:#FF9492;">=&gt;</span><span style="color:#91CBFF;">22</span></span>
<span class="line"><span style="color:#ADDCFF;">        &quot;likes&quot;</span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;">[</span></span>
<span class="line"><span style="color:#ADDCFF;">            &quot;fruits&quot;</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#ADDCFF;"> &quot;mango&quot;</span></span>
<span class="line"><span style="color:#ADDCFF;">            &quot;color&quot;</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#ADDCFF;"> &quot;yellow&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">        ]</span></span>
<span class="line"><span style="color:#F0F3F6;">    ]</span></span>
<span class="line"><span style="color:#F0F3F6;">]       </span><span style="color:#BDC4CC;"># behaves same as creating it with a &quot;,&quot;</span></span>
<span class="line"></span></code></pre></div><h4 id="push-and-pop-1" tabindex="-1">Push and Pop <a class="header-anchor" href="#push-and-pop-1" aria-label="Permalink to &quot;Push and Pop&quot;">​</a></h4><p><code>Yes</code> you can use push and pop in tables too, similar to <a href="./danfe-types.html#array">array</a>. You need to use these two operators <code>&lt;&lt;</code> and <code>&gt;&gt;</code> respectively. <br><br></p><p>While Pushing in table, a random string of <code>10 characters</code> is generated and inserted to the <code>table</code> with the value. <br> While Poping the last poped value is <code>returned</code>.</p><div class="language-danfe vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#FFB757;">table</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> [</span><span style="color:#ADDCFF;">&quot;value&quot;</span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> [</span><span style="color:#ADDCFF;">&quot;Pusing&quot;</span><span style="color:#F0F3F6;">]]</span></span>
<span class="line"><span style="color:#F0F3F6;">table[</span><span style="color:#ADDCFF;">&quot;value&quot;</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">&lt;&lt;</span><span style="color:#ADDCFF;"> &quot;in&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># Radom key string of 10 characters is generated</span></span>
<span class="line"><span style="color:#F0F3F6;">table </span><span style="color:#FF9492;">&lt;&lt;</span><span style="color:#F0F3F6;"> [</span><span style="color:#ADDCFF;">&quot;Table .&quot;</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#F0F3F6;">table </span><span style="color:#FF9492;">&lt;&lt;</span><span style="color:#91CBFF;"> 10</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># Poped value is stored in x</span></span>
<span class="line"><span style="color:#FFB757;">x</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> table </span><span style="color:#FF9492;">&gt;&gt;</span></span>
<span class="line"><span style="color:#FF9492;">println</span><span style="color:#F0F3F6;">(x </span><span style="color:#FF9492;">*</span><span style="color:#91CBFF;"> 4</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">%i{</span><span style="color:#ADDCFF;">table</span><span style="color:#FF9492;">}</span><span style="color:#ADDCFF;">, &quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">typeof</span><span style="color:#F0F3F6;">(table))</span></span></code></pre></div><div class="language-danfe vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#BDC4CC;"># Output</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91CBFF;">40</span></span>
<span class="line"><span style="color:#F0F3F6;">[</span><span style="color:#DBB7FF;">value</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> [Pusing, </span><span style="color:#FF9492;">in</span><span style="color:#F0F3F6;">], </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">{</span><span style="color:#FFB1AF;font-style:italic;">9zS</span><span style="color:#F0F3F6;">;</span><span style="color:#FF9492;">:</span><span style="color:#FFB1AF;font-style:italic;">4hzGWcp</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> [Table .]], table</span></span></code></pre></div>`,55))])}const D=o(F,[["render",d]]);export{f as __pageData,D as default};
