import{_ as n,c as e,a3 as o,o as d}from"./chunks/framework.ohJJpums.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"built-in-functions-table.md","filePath":"built-in-functions-table.md"}'),r={name:"built-in-functions-table.md"};function a(i,t,s,u,l,c){return d(),e("div",null,t[0]||(t[0]=[o('<table tabindex="0"><thead><tr><th><strong>Function</strong></th><th><strong>Syntax</strong></th><th><strong>Info</strong></th></tr></thead><tbody><tr><td><a href="./built-in-functions.html#println"><code>print</code></a></td><td>print(&quot;Hello &quot;, &quot;from &quot;, &quot;Sairash!&quot;)</td><td>prints anything on stdout</td></tr><tr><td><a href="./built-in-functions.html#println"><code>println</code></a></td><td>print(&quot;Hello &quot;, &quot;from &quot;, &quot;Sairash!&quot;)</td><td>prints anything and a newline on stdout</td></tr><tr><td><a href="./built-in-functions.html#input"><code>input</code></a></td><td>input(&quot;How was your day? &quot;)</td><td>lets you await and read user input from a terminal</td></tr><tr><td><a href="./built-in-functions.html#typeof"><code>typeof</code></a></td><td>typeof(identifier)</td><td>the type of argument is returned</td></tr><tr><td><a href="./built-in-functions.html#len"><code>len</code></a></td><td>len(array)</td><td>the length of array, table and string is returned</td></tr><tr><td><a href="./built-in-functions.html#int-float-string"><code>int</code></a></td><td>int(identifier)</td><td>converts the given argument into an int type</td></tr><tr><td><a href="./built-in-functions.html#int-float-string"><code>float</code></a></td><td>float(identifier)</td><td>converts the given argument into an float type</td></tr><tr><td><a href="./built-in-functions.html#int-float-string"><code>string</code></a></td><td>string(identifer)</td><td>converts the given argument into an string type</td></tr><tr><td><a href="./built-in-functions.html#testing"><code>assert</code></a></td><td>assert(&quot;type&quot;, &quot;test_name&quot;, &quot;test_case_1&quot;, &quot;test_case_2 optional&quot;)</td><td>Tests that the program is doing exactly what it&#39;s supposed to do.</td></tr><tr><td><a href="./built-in-functions.html#panic"><code>panic</code></a></td><td>panic(&quot;manually throw an error&quot;)</td><td>can manually throw an error</td></tr><tr><td><a href="./built-in-functions.html#random-generator"><code>rand_int</code></a></td><td>rand_int()</td><td>generates a random i64 number</td></tr><tr><td><a href="./built-in-functions.html#random-generator"><code>rand_str</code></a></td><td>rand_str(length) # length is optional</td><td>generates a random string</td></tr></tbody></table>',1)]))}const p=n(r,[["render",a]]);export{h as __pageData,p as default};
