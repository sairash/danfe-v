import{_ as s,c as e,a3 as n,o as l}from"./chunks/framework.ohJJpums.js";const u=JSON.parse('{"title":"Delete","description":"","frontmatter":{},"headers":[],"relativePath":"language/del.md","filePath":"language/del.md"}'),o={name:"language/del.md"};function t(p,a,c,r,d,i){return l(),e("div",null,a[0]||(a[0]=[n(`<h1 id="delete" tabindex="-1">Delete <a class="header-anchor" href="#delete" aria-label="Permalink to &quot;Delete&quot;">â€‹</a></h1><p>Every <code>Identifier</code> in danfe can be <code>derefrenced manully</code>. Altho, danfe takes care of <code>deleting identifiers automatically</code> by using a technique called <code>refrence counting</code>.</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-Kmr43" id="tab-i8dhRno" checked><label data-title="Engllish" for="tab-i8dhRno">Engllish</label><input type="radio" name="group-Kmr43" id="tab-71ll89F"><label data-title="Nepali" for="tab-71ll89F">Nepali</label></div><div class="blocks"><div class="language-danfe vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#FFB757;">x</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 10</span></span>
<span class="line"><span style="color:#FF9492;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Value of x: &quot;</span><span style="color:#F0F3F6;">, x)</span></span>
<span class="line"><span style="color:#FF9492;">del</span><span style="color:#F0F3F6;"> x</span></span>
<span class="line"><span style="color:#FF9492;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Value of x: &quot;</span><span style="color:#F0F3F6;">, x)</span></span></code></pre></div><div class="language-danfe vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#FFB757;">x</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 10</span></span>
<span class="line"><span style="color:#DBB7FF;">dekhauln</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Value of x: &quot;</span><span style="color:#F0F3F6;">, x)</span></span>
<span class="line"><span style="color:#FF9492;">hatau</span><span style="color:#F0F3F6;"> x</span></span>
<span class="line"><span style="color:#DBB7FF;">dekhauln</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Value of x: &quot;</span><span style="color:#F0F3F6;">, x)</span></span></code></pre></div></div></div><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#91CBFF;font-weight:bold;"># Output</span></span>
<span class="line"><span style="color:#F0F3F6;">Value of x: 10</span></span>
<span class="line"><span style="color:#F0F3F6;">Value of x: </span></span>
<span class="line"><span style="color:#F0F3F6;">Error Encountered when eval -&gt; identifier: </span></span>
<span class="line"><span style="color:#F0F3F6;">:0:0: </span><span style="color:#F0F3F6;font-weight:bold;">**undefined**</span><span style="color:#F0F3F6;">: x</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This keyword needs to be used <code>carefully</code> as this has the ability to <code>break</code> your program.</p></div>`,5)]))}const y=s(o,[["render",t]]);export{u as __pageData,y as default};
