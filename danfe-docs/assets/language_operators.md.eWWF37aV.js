import{_ as e,c as o,a3 as r,o as a}from"./chunks/framework.ohJJpums.js";const g=JSON.parse('{"title":"Operators","description":"","frontmatter":{},"headers":[],"relativePath":"language/operators.md","filePath":"language/operators.md"}'),d={name:"language/operators.md"};function s(n,t,i,l,h,c){return a(),o("div",null,t[0]||(t[0]=[r('<h1 id="operators" tabindex="-1">Operators <a class="header-anchor" href="#operators" aria-label="Permalink to &quot;Operators&quot;">​</a></h1><p>An operator is a symbol that tells <strong>Danfe</strong> to perform specific <code>mathematical</code> or <code>logical manipulations</code>. Danfe is <code>rich</code> in built-in operators and provides the following type of operators −</p><details class="details custom-block" open=""><summary>Available Operators</summary><ul><li><a href="./operators.html#arithmetic-operators"><strong><code>Arithmetic Operators</code></strong></a></li><li><a href="./operators.html#relational-operators"><strong><code>Relational Operators</code></strong></a></li><li><a href="./operators.html#relational-operators"><strong><code>Logical Operators</code></strong></a></li><li><a href="./operators.html#unary-operators"><strong><code>Unary Operators</code></strong></a></li></ul></details><h2 id="arithmetic-operators" tabindex="-1">Arithmetic Operators <a class="header-anchor" href="#arithmetic-operators" aria-label="Permalink to &quot;Arithmetic Operators&quot;">​</a></h2><p>Following table shows all the <code>arithmetic operators</code> supported by Danfe. Assume variable <strong>A</strong> holds <code>10</code> and variable <strong>B</strong> holds <code>20</code> then -</p><table tabindex="0"><thead><tr><th><strong>Operator</strong></th><th><strong>Description</strong></th><th><strong>Example</strong></th></tr></thead><tbody><tr><td><strong>+</strong></td><td>Adds two operands</td><td>A + B will give 30</td></tr><tr><td><strong>-</strong></td><td>Subtracts second operand from the first</td><td>A - B will give -10</td></tr><tr><td><strong>*</strong></td><td>Multiply both operands</td><td>A * B will give 200</td></tr><tr><td><strong>/</strong></td><td>Divide numerator by de-numerator</td><td>B / A will give 2</td></tr><tr><td><strong>%</strong></td><td>Modulus Operator and remainder of after an integer division</td><td>B % A will give 0</td></tr><tr><td><strong>^</strong></td><td>Exponent Operator takes the exponents</td><td>A^2 will give 100</td></tr></tbody></table><h2 id="relational-operators" tabindex="-1">Relational Operators <a class="header-anchor" href="#relational-operators" aria-label="Permalink to &quot;Relational Operators&quot;">​</a></h2><p>Following table shows all the <code>relational operators</code> supported by Danfe. Assume variable <strong>A</strong> holds <code>10</code> and variable <strong>B</strong> holds <code>20</code> then -</p><table tabindex="0"><thead><tr><th><strong>Operator</strong></th><th><strong>Description</strong></th><th><strong>Example</strong></th></tr></thead><tbody><tr><td><strong>==</strong></td><td>Checks if the value of two operands are equal or not, if yes then condition becomes true.</td><td>(A == B) is not true.</td></tr><tr><td><strong>!=</strong></td><td>Checks if the value of two operands are equal or not, if values are not equal then condition becomes true.</td><td>(A != B) is true.</td></tr><tr><td><strong>&gt;</strong></td><td>Checks if the value of left operand is greater than the value of right operand, if yes then condition becomes true.</td><td>(A &gt; B) is not true.</td></tr><tr><td><strong>&lt;</strong></td><td>Checks if the value of left operand is less than the value of right operand, if yes then condition becomes true.</td><td>(A &lt; B) is true.</td></tr><tr><td><strong>&gt;=</strong></td><td>Checks if the value of left operand is greater than or equal to the value of right operand, if yes then condition becomes true.</td><td>(A &gt;= B) is not true.</td></tr><tr><td><strong>&lt;=</strong></td><td>Checks if the value of left operand is less than or equal to the value of right operand, if yes then condition becomes true.</td><td>(A &lt;= B) is true.</td></tr></tbody></table><h2 id="logical-operators" tabindex="-1">Logical Operators <a class="header-anchor" href="#logical-operators" aria-label="Permalink to &quot;Logical Operators&quot;">​</a></h2><p>Following table shows all the <code>logical operators</code> supported by Danfe. Assume variable <strong>A</strong> holds <code>true</code> and variable <strong>B</strong> holds <code>false</code> then −</p><table tabindex="0"><thead><tr><th><strong>Operator</strong></th><th><strong>Description</strong></th><th><strong>Example</strong></th></tr></thead><tbody><tr><td><strong>&amp;&amp;</strong></td><td>Called Logical AND operator. If both the operands are non zero then condition becomes true.</td><td>(A &amp;&amp; B) is false.</td></tr><tr><td><strong>||</strong></td><td>Called Logical OR Operator. If any of the two operands is non zero then condition becomes true.</td><td>(A || B) is true.</td></tr></tbody></table><h2 id="unary-operators" tabindex="-1">Unary Operators <a class="header-anchor" href="#unary-operators" aria-label="Permalink to &quot;Unary Operators&quot;">​</a></h2><p>Following table shows all the <code>unary operators</code> supported by Danfe. Assume variable <strong>A</strong> holds <code>1</code></p><table tabindex="0"><thead><tr><th><strong>Operator</strong></th><th><strong>Description</strong></th><th><strong>Example</strong></th></tr></thead><tbody><tr><td><strong>-</strong></td><td>Negation, Convert positive into negative and vice versa</td><td>-A is -1</td></tr><tr><td><strong>!</strong></td><td>NOT Operator, Convert true into false and vice versa</td><td>!A is 0.</td></tr></tbody></table><h2 id="operators-precedence" tabindex="-1">Operators Precedence <a class="header-anchor" href="#operators-precedence" aria-label="Permalink to &quot;Operators Precedence&quot;">​</a></h2><p>Operator precedence determines the <code>grouping</code> of terms in an expression. This <code>affects</code> how an expression is <code>evaluated</code>. Certain operators have higher precedence than others; for example, the <code>multiplication</code> operator has higher precedence than the <code>addition</code> operator − <br></p><p>For example, <code>x = 7 + 3 * 2</code>; Here x is assigned <code>13</code>, not <code>20</code> because operator <code>*</code> has higher precedence than <code>+</code> so it first get multiplied with <code>3*2</code> and then adds into <code>7</code>. <br></p><p>Here, operators with the highest precedence appear at the top of the table, those with the lowest appear at the bottom. Within an expression, higher precedence operators will be evaluated first. <br></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Using brackets <code>()</code> always takes the highest presidence.</p></div><table tabindex="0"><thead><tr><th><strong>Category</strong></th><th><strong>Operator</strong></th><th><strong>Associativity</strong></th></tr></thead><tbody><tr><td>Unary</td><td>! -</td><td>Right to left</td></tr><tr><td>Multiplicative</td><td>* / %</td><td>Left to right</td></tr><tr><td>Additive</td><td>+ -</td><td>Left to right</td></tr><tr><td>Relational</td><td>&lt; &gt; &lt;= &gt;= == !=</td><td>Left to right</td></tr><tr><td>Equality</td><td>== !=</td><td>Left to right</td></tr><tr><td>Logical AND</td><td>&amp;&amp;</td><td>Left to right</td></tr><tr><td>Logical OR</td><td>||</td><td>Left to right</td></tr></tbody></table>',21)]))}const u=e(d,[["render",s]]);export{g as __pageData,u as default};
