import{_ as e,c as d,a3 as o,o as a}from"./chunks/framework.ohJJpums.js";const f=JSON.parse('{"title":"Keywords","description":"","frontmatter":{},"headers":[],"relativePath":"keywords.md","filePath":"keywords.md"}'),n={name:"keywords.md"};function r(i,t,c,l,s,u){return a(),d("div",null,t[0]||(t[0]=[o('<h1 id="keywords" tabindex="-1">Keywords <a class="header-anchor" href="#keywords" aria-label="Permalink to &quot;Keywords&quot;">​</a></h1><p>Most of the keywords / reserved identifiers have it&#39;s <code>alias</code>. Which just means that you can use any of these keywords to do the <code>same operations</code>. <br><br></p><table tabindex="0"><thead><tr><th><strong>Reserved</strong></th><th><strong>Alias</strong></th><th><strong>Operation</strong></th></tr></thead><tbody><tr><td><a href="/language/danfe-types.html#boolean"><code>true</code></a></td><td><code>thik</code></td><td>Holds 1</td></tr><tr><td><a href="/language/danfe-types.html#boolean"><code>false</code></a></td><td><code>bethik</code></td><td>Holds 0</td></tr><tr><td><a href="/language/danfe-types.html#nil"><code>nil</code></a></td><td><code>khali</code>, <code>null</code>, <code>sunna</code></td><td>Holds no value or 0</td></tr><tr><td><a href="/language/operators.html"><code>if</code></a></td><td><code>yedi</code></td><td>Create conditional statements</td></tr><tr><td><a href="/language/operators.html#else"><code>else</code></a></td><td><code>natra</code></td><td>Conditional statement which executes if the boolean expression is false</td></tr><tr><td><a href="/language/loop.html"><code>loop</code></a></td><td><code>ghum</code>, <code>for</code></td><td>Create a block of code that executes until it&#39;s stopped</td></tr><tr><td><a href="/language/loop.html#break"><code>break</code></a></td><td><code>todh</code></td><td>Terminates the loop from executing any further</td></tr><tr><td><a href="/language/loop.html#continue"><code>continue</code></a></td><td><code>xod</code></td><td>Skips the remaining loop and starts from the top</td></tr><tr><td><a href="/language/module.html"><code>import</code></a></td><td><code>prayog</code></td><td>Import file that ends with .df</td></tr><tr><td><a href="/language/module.html"><code>as</code></a></td><td><code>naam</code></td><td>Custom alias name of import statement</td></tr><tr><td><a href="/language/function.html"><code>function</code></a></td><td><code>karya</code></td><td>Create a block of code that can be called as name_of_function()</td></tr><tr><td><a href="/language/function.html#return"><code>return</code></a></td><td><code>pathau</code></td><td>Return statement to send value from function</td></tr><tr><td><a href="/language/vblock.html"><code>v</code></a></td><td></td><td>Start Vlang Code Block (used to execute valng code)</td></tr><tr><td><a href="/language/vblock.html#endv"><code>endv</code></a></td><td></td><td>End Vlang Code Block</td></tr><tr><td><a href="/language/del.html"><code>del</code></a></td><td><code>hatau</code></td><td>manually remove identifier from memory</td></tr><tr><td><a href="/language/module.html"><code>__module__</code></a></td><td></td><td>Get current module name</td></tr></tbody></table><h2 id="built-in-functions" tabindex="-1">Built in functions <a class="header-anchor" href="#built-in-functions" aria-label="Permalink to &quot;Built in functions&quot;">​</a></h2><p>Some functions are builtin like <code>println</code>. Here is the complete list:</p><table tabindex="0"><thead><tr><th><strong>Function</strong></th><th><strong>Syntax</strong></th><th><strong>Info</strong></th></tr></thead><tbody><tr><td><a href="./built-in-functions.html#println"><code>print</code></a></td><td>print(&quot;Hello &quot;, &quot;from &quot;, &quot;Sairash!&quot;)</td><td>prints anything on stdout</td></tr><tr><td><a href="./built-in-functions.html#println"><code>println</code></a></td><td>print(&quot;Hello &quot;, &quot;from &quot;, &quot;Sairash!&quot;)</td><td>prints anything and a newline on stdout</td></tr><tr><td><a href="./built-in-functions.html#input"><code>input</code></a></td><td>input(&quot;How was your day? &quot;)</td><td>lets you await and read user input from a terminal</td></tr><tr><td><a href="./built-in-functions.html#typeof"><code>typeof</code></a></td><td>typeof(identifier)</td><td>the type of argument is returned</td></tr><tr><td><a href="./built-in-functions.html#len"><code>len</code></a></td><td>len(array)</td><td>the length of array, table and string is returned</td></tr><tr><td><a href="./built-in-functions.html#int-float-string"><code>int</code></a></td><td>int(identifier)</td><td>converts the given argument into an int type</td></tr><tr><td><a href="./built-in-functions.html#int-float-string"><code>float</code></a></td><td>float(identifier)</td><td>converts the given argument into an float type</td></tr><tr><td><a href="./built-in-functions.html#int-float-string"><code>string</code></a></td><td>string(identifer)</td><td>converts the given argument into an string type</td></tr><tr><td><a href="./built-in-functions.html#testing"><code>assert</code></a></td><td>assert(&quot;type&quot;, &quot;test_name&quot;, &quot;test_case_1&quot;, &quot;test_case_2 optional&quot;)</td><td>Tests that the program is doing exactly what it&#39;s supposed to do.</td></tr><tr><td><a href="./built-in-functions.html#panic"><code>panic</code></a></td><td>panic(&quot;manually throw an error&quot;)</td><td>can manually throw an error</td></tr><tr><td><a href="./built-in-functions.html#random-generator"><code>rand_int</code></a></td><td>rand_int()</td><td>generates a random i64 number</td></tr><tr><td><a href="./built-in-functions.html#random-generator"><code>rand_str</code></a></td><td>rand_str(length) # length is optional</td><td>generates a random string</td></tr></tbody></table>',6)]))}const m=e(n,[["render",r]]);export{f as __pageData,m as default};
